<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小小的大肥的主页</title>
    <link>https://NYH-Dolphin.github.io/</link>
    <description>Recent content on 小小的大肥的主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://NYH-Dolphin.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>E星计划-Lecture3 三维图形学基础</title>
      <link>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture3-%E4%B8%89%E7%BB%B4%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture3-%E4%B8%89%E7%BB%B4%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80/</guid>
      <description>1. 变换 变换简介 什么是变换  将一个坐标的点 (x, y) 映射到另一个坐标系中的点 (x&amp;rsquo;, y&#39;)  为什么是顶点变换  行业规范  三角形网格模型作为美术制作的基础 三角形作为 GPU 绘制基础图元 顶点变换可以简化表示三角形的网格变换，属性插值表示三角形    顶点变换在游戏中的应用  成为游戏行业的基准  场景摆放 模型动作 渲染管线 美术建模    二维变换  可以任意组合 可以变换回去（可逆）  三维变换 三维变换可以用于
 几何建模 在场景中摆放物体  骨骼动画  基于投影渲染管线  其它的模型 其实，除了顶点变换，还有其它的模型
 贝塞尔曲面 体素 点云 隐式表面 SDF  变换的分类 刚体变换 Rigid Body Transform  保距变换：线段经过变换后，距离不变 保角变换：夹角经过变换后，角度不变  相似变换 Similarity Transform  保形变换 保角变换  线性变换 Linear Transform  L(p + q) = L(p) + L(q) L(ap) = a L(p)  仿射变换 Affine Transform  保平行 保线段的比例关系  投影变换 Projection Transform  保共线 可以反应不同平面直接的变换  自由变换 Free Transform  不保共线 更加复杂 eg：鱼眼相机  变换的数学表示 仿射变换     二维 三维     公式     矩阵      齐次变换 使用齐次变换矩阵，拓展一个位图，可以更加简洁的表示</description>
    </item>
    
    <item>
      <title>E星计划-Lecture2 渲染流程简述</title>
      <link>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture2-%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</link>
      <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture2-%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</guid>
      <description>1. E 星计划大作业 基本要求  渲染引擎：BGFX 编程语言：C++/GLSL 平台：Windows/Visual Studio 2022 工程组织：CMake  Level 作业分为 5 个 level，每完成一个 level 的所有需求，则可挑战下一个 level
详见作业包里面的 README.md
 Level1（15%）  加载模型，绘制在屏幕上 添加环绕相机（Orbit Camera），并可以使用鼠标操控（类似 geometryv 的操作方式）  鼠标左键拖拽旋转镜头 鼠标滚轮缩放镜头     Level2（15%）  为模型添加基础纹理 为模型添加基础光照（Blinn-Phong） 在保留环绕相机功能的情况下，为相机添加键盘控制  WASD 控制镜头上下左右平移     Level3（25%）  把模型的直接光漫反射光照改为 PBR 模型实现  模型的金属度能正确影响漫反射光照 模型的 albedo（反照率）使用纹理控制   把模型的直接光改为 PBR 模型实现  模型的金属度、粗糙度通过纹理控制     Level4（25%）  使用 IBL（Image-Based Lighting），为模型添加环境光照的漫反射部分 使用 IBL，为模型添加环境光照的高光反射部分 添加一个包住场景的天空盒 天空盒使用 cubemap 纹理，对应 IBL 图中的 mipmap level 0   Level5（20%）  使用 ShadowMap 的方式，为模型添加阴影    提交要求  统一压缩为一个文件，格式为 zip 或 rar，大小在 200mb 以内  包含编译好的，可正常运行的二进制文件 包含录制的演示视频 包含源码文件，可以使用 CMake 生成 VS 工程，可编译运行 包含程序架构说明文档    2.</description>
    </item>
    
    <item>
      <title>E星计划-Lecture1 游戏引擎综述</title>
      <link>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture1-%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%BB%BC%E8%BF%B0/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture1-%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%BB%BC%E8%BF%B0/</guid>
      <description>1. E 星计划介绍 排期计划  Lecture1 开营仪式暨游戏引擎综述 Lecture2 渲染流程概述 Lecture3 三维图形学 &amp;amp; 基础数学 Lecture4 纹理综述 Lecture5 光照综述 Lecture6 性能优化综述 Lecture7 全局光照技术综述  完课要求 2. 游戏引擎及简史 什么是游戏引擎  一种快速开发游戏的工具，将游戏开发中繁琐的组件进行系统化、标准化的处理 可以延伸到影视作品、工业仿真等 游戏引擎 = 引擎核心组件 + 工具 游戏 = 引擎核心组件 + 内容（资源、玩法）  主流的游戏引擎  UE Unity 自研引擎  游戏的历史  1993 最早出现游戏引擎的时间，那时候游戏和引擎是一起开发的  第一个商业授权的引擎   1998 UE 1.0  到目前已经到 5.0   2005 Unity 1.0  3. 游戏引擎架构 架构概述  引擎核心组件  Core：支撑模块：内存管理、文件管理、对象系统、反射系统、多线程、主循环等 动画、渲染、物理、声音、脚本、AI、网络   工具  渲染 什么是渲染 https://www.</description>
    </item>
    
    <item>
      <title>Unity AssetBundle</title>
      <link>https://NYH-Dolphin.github.io/games/unity-assetbundle/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://NYH-Dolphin.github.io/games/unity-assetbundle/</guid>
      <description>参考链接：AssetBundle详解 - 知乎 (zhihu.com)  1. AssetBundle 介绍  AssetBundle 是将资源使用 Unity 提供的一种用于存储资源的压缩格式打包后的集合 它可以存储任何一种 Unity 可以识别的资源，如模型，纹理图，音频，场景等资源，也可以加载开发者自定义的二进制文件 文件类型是 .assetbundle/.unity3d 它们先前被设计好，很容易就下载到我们的游戏或者场景当中  AssetBundle 开发流程  创建 Asset bundle，开发者在 unity 编辑器中通过脚本将所需要的资源打包成 AssetBundle 文件 上传服务器，开发者将打包好的 AssetBundle 文件上传至服务器中，使得游戏客户端能够获取当前的资源，进行游戏的更新 下载 AssetBundle，首先将其下载到本地设备中，然后再通过 AssetBudle 的加载模块将资源加到游戏之中 加载，通过 Unity 提供的 API 可以加载资源里面包含的模型、纹理图、音频、动画、场景等来更新游戏客户端 卸载 AssetBundle，卸载之后可以节省内存资源，并且要保证资源的正常更新  2. AssetBundle 多平台打包 创建 AssetBundle  只有在 Asset 窗口中的资源才可以打包，先以 Prefab 的形式保存 单击要打包的 Prefab，在 Inspector 窗口右下角属性窗口底部会有一个 AssetBundle 的创建工具，直接创建  名称固定为小写，如果使用了大写字母之后，系统会自动转换为小写格式    打包 AssetBundle AssetBundle 创建之后需要导出，这一个过程就需要编写相应的代码实现</description>
    </item>
    
    <item>
      <title>Unity 行走与鼠标视角移动</title>
      <link>https://NYH-Dolphin.github.io/games/unity-%E8%A1%8C%E8%B5%B0%E4%B8%8E%E9%BC%A0%E6%A0%87%E8%A7%86%E8%A7%92%E7%A7%BB%E5%8A%A8/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://NYH-Dolphin.github.io/games/unity-%E8%A1%8C%E8%B5%B0%E4%B8%8E%E9%BC%A0%E6%A0%87%E8%A7%86%E8%A7%92%E7%A7%BB%E5%8A%A8/</guid>
      <description>1. 行走部分 WASD 控制行走 public float fMoveSpeed = 10f; // WASD移动速度  void Update(){  KeyBoardControl(); }  private void KeyBoardControl() {  if (Input.GetKey(KeyCode.W))  {  transform.Translate(Vector3.forward * fMoveSpeed * Time.deltaTime);  }   if (Input.GetKey(KeyCode.S))  {  transform.Translate(Vector3.back * fMoveSpeed * Time.deltaTime);  }   if (Input.GetKey(KeyCode.A))  {  transform.Translate(Vector3.up * fMoveSpeed * Time.deltaTime);  }   if (Input.GetKey(KeyCode.D))  {  transform.</description>
    </item>
    
    <item>
      <title>Unity TMP 设置中文字体</title>
      <link>https://NYH-Dolphin.github.io/games/unity-tmp-%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/</link>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://NYH-Dolphin.github.io/games/unity-tmp-%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/</guid>
      <description>为了解决 TMP 不支持中文字体的情况，采取以下方式
1. 找到一个中文常见汉字的文档 这里给出一个链接：中文7000常用文字
2. 找到一个Font素材 在网上可以找到一些丰富的字体素材
或者本地可以下载一些字体文件，一般在 C:/Windows/Fonts 存放了一些常见字体
将想要使用的素材拖入 Unity 即可
3. 使用 TMP 创建字体 asset 打开 Window/TextMeshPro/Font Asset Creator
将字体文件拖入 Source Font File，将下载的中文常见汉字文档拖入 Character File
注意设置 Atlas Resolution，复杂的汉字需要最高的分辨率，也就是 8192 x 8192，如果选择了小的分辨率，最后可能无法显示，其它的设置可以参考截图下面的示例，也可以自行修改
配置完成后，点击 Generate Font Atlas，由于文字个数很多，可能需要相当长的一段时间才能完成生成
完成好后，旁边有一个 Save 按钮，将导出的 Font Asset 存放在指定位置即可
4. 使用 Font Asset 使用时，在创建了 TMP GameObject 的地方，把生成的 Font Asset 拖入到指定位置即可使用</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://NYH-Dolphin.github.io/posts/first_post/</link>
      <pubDate>Sat, 04 Dec 2021 20:47:37 +0800</pubDate>
      
      <guid>https://NYH-Dolphin.github.io/posts/first_post/</guid>
      <description>Hello, World! </description>
    </item>
    
  </channel>
</rss>
