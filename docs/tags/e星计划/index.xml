<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>E星计划 on 小小的大肥的主页</title>
    <link>https://NYH-Dolphin.github.io/tags/e%E6%98%9F%E8%AE%A1%E5%88%92/</link>
    <description>Recent content in E星计划 on 小小的大肥的主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://NYH-Dolphin.github.io/tags/e%E6%98%9F%E8%AE%A1%E5%88%92/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>E星计划-Lecture1 游戏引擎综述</title>
      <link>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture1-%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%BB%BC%E8%BF%B0/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture1-%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%BB%BC%E8%BF%B0/</guid>
      <description>1. E 星计划介绍 排期计划  Lecture1 开营仪式暨游戏引擎综述 Lecture2 渲染流程概述 Lecture3 三维图形学 &amp;amp; 基础数学 Lecture4 纹理综述 Lecture5 光照综述 Lecture6 性能优化综述 Lecture7 全局光照技术综述  完课要求 2. 游戏引擎及简史 什么是游戏引擎  一种快速开发游戏的工具，将游戏开发中繁琐的组件进行系统化、标准化的处理 可以延伸到影视作品、工业仿真等 游戏引擎 = 引擎核心组件 + 工具 游戏 = 引擎核心组件 + 内容（资源、玩法）  主流的游戏引擎  UE Unity 自研引擎  游戏的历史  1993 最早出现游戏引擎的时间，那时候游戏和引擎是一起开发的  第一个商业授权的引擎   1998 UE 1.0  到目前已经到 5.0   2005 Unity 1.0  3. 游戏引擎架构 架构概述  引擎核心组件  Core：支撑模块：内存管理、文件管理、对象系统、反射系统、多线程、主循环等 动画、渲染、物理、声音、脚本、AI、网络   工具  渲染 什么是渲染 https://www.</description>
    </item>
    
    <item>
      <title>E星计划-Lecture2 渲染流程简述</title>
      <link>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture2-%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://NYH-Dolphin.github.io/notes/e%E6%98%9F%E8%AE%A1%E5%88%92-lecture2-%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</guid>
      <description>1. E 星计划大作业 基本要求  渲染引擎：BGFX 编程语言：C++/GLSL 平台：Windows/Visual Studio 2022 工程组织：CMake  Level 作业分为 5 个 level，每完成一个 level 的所有需求，则可挑战下一个 level
详见作业包里面的 README.md
 Level1（15%）  加载模型，绘制在屏幕上 添加环绕相机（Orbit Camera），并可以使用鼠标操控（类似 geometryv 的操作方式）  鼠标左键拖拽旋转镜头 鼠标滚轮缩放镜头     Level2（15%）  为模型添加基础纹理 为模型添加基础光照（Blinn-Phong） 在保留环绕相机功能的情况下，为相机添加键盘控制  WASD 控制镜头上下左右平移     Level3（25%）  把模型的直接光漫反射光照改为 PBR 模型实现  模型的金属度能正确影响漫反射光照 模型的 albedo（反照率）使用纹理控制   把模型的直接光改为 PBR 模型实现  模型的金属度、粗糙度通过纹理控制     Level4（25%）  使用 IBL（Image-Based Lighting），为模型添加环境光照的漫反射部分 使用 IBL，为模型添加环境光照的高光反射部分 添加一个包住场景的天空盒 天空盒使用 cubemap 纹理，对应 IBL 图中的 mipmap level 0   Level5（20%）  使用 ShadowMap 的方式，为模型添加阴影    提交要求  统一压缩为一个文件，格式为 zip 或 rar，大小在 200mb 以内  包含编译好的，可正常运行的二进制文件 包含录制的演示视频 包含源码文件，可以使用 CMake 生成 VS 工程，可编译运行 包含程序架构说明文档    2.</description>
    </item>
    
  </channel>
</rss>
